package com.example.mewnfo.domain.model

import com.example.mewnfo.data.local.entity.Cat as LocalCat
import com.example.mewnfo.data.remote.model.Cat as RemoteCat

data class Cat(
    val name: String,
    val weight: String,
    val vetstreetUrl: String? = null,
    val vcahospitalsUrl: String? = null,
    val temperament: String,
    val origin: String,
    val countryCodes: String,
    val countryCode: String,
    val description: String,
    val lifeSpan: String,
    val indoor: Int,
    val lap: Int? = null,
    val altNames: String,
    val adaptability: Int,
    val affectionLevel: Int,
    val childFriendly: Int,
    val dogFriendly: Int,
    val energyLevel: Int,
    val grooming: Int,
    val healthIssues: Int,
    val intelligence: Int,
    val sheddingLevel: Int,
    val socialNeeds: Int,
    val strangerFriendly: Int,
    val vocalisation: Int,
    val experimental: Int,
    val hairless: Int,
    val natural: Int,
    val rare: Int,
    val rex: Int,
    val suppressedTail: Int,
    val shortLegs: Int,
    val wikipediaUrl: String,
    val hypoallergenic: Int,
    val imageUrl: String? = null,
) {
    constructor(remoteCat: RemoteCat) : this(
        name = remoteCat.name,
        weight = remoteCat.weight.metric,
        vetstreetUrl = remoteCat.vetstreetUrl,
        vcahospitalsUrl = remoteCat.vcahospitalsUrl,
        temperament = remoteCat.temperament,
        origin = remoteCat.origin,
        countryCodes = remoteCat.countryCodes,
        countryCode = remoteCat.countryCode,
        description = remoteCat.description,
        lifeSpan = remoteCat.lifeSpan,
        indoor = remoteCat.indoor,
        lap = remoteCat.lap,
        altNames = remoteCat.altNames,
        adaptability = remoteCat.adaptability,
        affectionLevel = remoteCat.affectionLevel,
        childFriendly = remoteCat.childFriendly,
        dogFriendly = remoteCat.dogFriendly,
        energyLevel = remoteCat.energyLevel,
        grooming = remoteCat.grooming,
        healthIssues = remoteCat.healthIssues,
        intelligence = remoteCat.intelligence,
        sheddingLevel = remoteCat.sheddingLevel,
        socialNeeds = remoteCat.socialNeeds,
        strangerFriendly = remoteCat.strangerFriendly,
        vocalisation = remoteCat.vocalisation,
        experimental = remoteCat.experimental,
        hairless = remoteCat.hairless,
        natural = remoteCat.natural,
        rare = remoteCat.rare,
        rex = remoteCat.rex,
        suppressedTail = remoteCat.suppressedTail,
        shortLegs = remoteCat.shortLegs,
        wikipediaUrl = remoteCat.wikipediaUrl,
        hypoallergenic = remoteCat.hypoallergenic,
        imageUrl = remoteCat.image?.url,
    )

    constructor(localCat: LocalCat) : this(
        name = localCat.name,
        weight = localCat.weight.metric,
        vetstreetUrl = localCat.vetstreetUrl,
        vcahospitalsUrl = localCat.vcahospitalsUrl,
        temperament = localCat.temperament,
        origin = localCat.origin,
        countryCodes = localCat.countryCodes,
        countryCode = localCat.countryCode,
        description = localCat.description,
        lifeSpan = localCat.lifeSpan,
        indoor = localCat.indoor,
        lap = localCat.lap,
        altNames = localCat.altNames,
        adaptability = localCat.adaptability,
        affectionLevel = localCat.affectionLevel,
        childFriendly = localCat.childFriendly,
        dogFriendly = localCat.dogFriendly,
        energyLevel = localCat.energyLevel,
        grooming = localCat.grooming,
        healthIssues = localCat.healthIssues,
        intelligence = localCat.intelligence,
        sheddingLevel = localCat.sheddingLevel,
        socialNeeds = localCat.socialNeeds,
        strangerFriendly = localCat.strangerFriendly,
        vocalisation = localCat.vocalisation,
        experimental = localCat.experimental,
        hairless = localCat.hairless,
        natural = localCat.natural,
        rare = localCat.rare,
        rex = localCat.rex,
        suppressedTail = localCat.suppressedTail,
        shortLegs = localCat.shortLegs,
        wikipediaUrl = localCat.wikipediaUrl,
        hypoallergenic = localCat.hypoallergenic,
        imageUrl = localCat.image?.url,
    )
}